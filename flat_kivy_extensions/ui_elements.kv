
## #:import ProgressSpinner kivy.garden.progressspinner.ProgressSpinner
## #:import icon__ kivy.garden.iconfonts.icon
## #:import CustomIcon flat_kivy_extensions.uix.customicon.CustomIcon

<-CustomButtonBase>:
    color: app.get_color(self.color_tuple)
    ripple_color: app.get_color(self.ripple_color_tuple)
    canvas.before:
        Color:
            rgba: self.color_down[0:3] + [self.alpha] if self.state == 'down' or root.disabled else self.color[0:3] + [self.alpha]
        RoundedRectangle:
            size: (self.width - self.border_size[1] - self.border_size[3], self.height - self.border_size[0] - self.border_size[2])
            pos: (self.x + self.border_size[3], self.y + self.border_size[2])
            radius: [(self.radius, self.radius), (self.radius, self.radius), (self.radius, self.radius), (self.radius, self.radius)]

    FlatLabel:
        size_hint: (1.0, 1.0)
        color_tuple: root.font_color_tuple
        text: root.text
        style: root.style
        text_size: root.size
        font_ramp_tuple: root.font_ramp_tuple
        valign: 'middle'
        halign: 'center'
        font_size: root.font_size


<CustomIcon>:

    valign: 'middle'
    #font_name: app.get_font('data/font/fontawesome-webfont.ttf')
    halign: 'center'
    padding: ('5dp', '5dp')
    color: app.get_color(root.color_tuple)


    #text: "%s" app.get_icon(self.icon)
    markup: True
    #text: "%s"%(icon__(self.icon, size=None, color='ff3333')) if self.icon != '' else ''
    #text: "%s"%(icon__(self.icon, size=None, color=None)) if self.icon != '' else ''
    

    #color: (0,0,0,1)
    #font_size: '12dp'
    #text: '?'

<-CustomIconButton>:
    color: app.get_color(self.color_tuple) 
    ripple_color: app.get_color(self.ripple_color_tuple)
    icon_font_size: dp(5) 
    _icon: icon.__self__
    _label: label.__self__
    _layout: label_space.__self__
    radius: 0
    height_offset: 0
    canvas.before:
        Color:
            rgb: root.color_down if root.state == 'down' or root.disabled else root.color
        RoundedRectangle:
            size: (self.size[0], self.size[1]-self.height_offset)
            pos: (self.pos[0], self.pos[1]+self.height_offset)
            radius: [(self.radius, self.radius), (self.radius, self.radius), (self.radius, self.radius), (self.radius, self.radius)]

    StackLayout:
        id: label_space
        orientation: root.orientation
        padding: root.content_padding
        spacing: root.content_spacing
        #FlatIcon:
        CustomIcon:
            id: icon
            size_hint: (None, 1.0) 
            width: self.texture_size[0]
            #width: self.height
            icon: root.icon
            valign: 'middle'
            halign: 'left' 
            opacity: label.color[3]
            color_tuple: root.icon_color_tuple
            text_size: self.size
            font_size: root.icon_font_size
        FlatLabel:
            id: label
            size_hint: (None, 1.0) 
            width: root.size[0] - icon.size[0] - root.content_padding[0] - root.content_padding[2] 
            text: root.text
            style: root.style
            color_tuple: root.font_color_tuple
            font_ramp_tuple: root.font_ramp_tuple
            valign: 'middle'
            halign: 'left' 
            text_size: self.size
            font_size: root.font_size


<-CustomSlider>:
    ripple_color: app.get_color(self.ripple_color_tuple)
    canvas:
        # draw the slider background
        Color:
            rgba: app.get_color(self.color_tuple) if not self.disabled else [.8, .8, .8, 1.0]
        Rectangle:
            pos: (self.x + self.padding, self.center_y - self.slider_bar_width/2) if self.orientation == 'horizontal' else (self.center_x - self.slider_bar_width/2, self.y + self.padding)
            size: (self.width - self.padding * 2, self.slider_bar_width) if self.orientation == 'horizontal' else (self.slider_bar_width, self.height - self.padding * 2)
            #size: (self.value_pos[0]-self.slider_handle_radius*2, self.slider_bar_width) if self.orientation == 'horizontal' else (self.slider_bar_width, self.height - self.padding * 2)
        # draw the line around the slider background
        Color:
            rgba: app.get_color(self.outline_color_tuple) if not self.disabled else [.3, .3, .3, 1.0]
        Line:
            rounded_rectangle: [self.x + self.padding, self.center_y - self.slider_bar_width/2, self.width - self.padding * 2, self.slider_bar_width, dp(1)] if self.orientation == 'horizontal' else [self.center_x - self.slider_bar_width/2, self.y + self.padding, self.slider_bar_width, self.height - self.padding * 2, dp(1)]
            width: sp(0.5)

        # draw the main slider handle
        Color:
            rgba: app.get_color(self.slider_color_tuple) if not self.disabled else [.8, .8, .8, 1.0]
        Ellipse:
            pos: (self.value_pos[0] - self.slider_handle_radius, self.center_y - self.slider_handle_radius) if self.orientation == 'horizontal' else (self.center_x - self.slider_handle_radius, self.value_pos[1] - self.slider_handle_radius)
            size: (self.slider_handle_radius*2, self.slider_handle_radius*2)
        # draw the line around the slider handle
        Color:
            rgba: app.get_color(self.slider_outline_color_tuple) if not self.disabled else [.4, .4, .4, .4]
        Line:
            ellipse: [self.value_pos[0] - self.slider_handle_radius, self.center_y - self.slider_handle_radius, self.slider_handle_radius*2, self.slider_handle_radius*2] if self.orientation == 'horizontal' else [self.center_x - self.slider_handle_radius, self.value_pos[1] - self.slider_handle_radius, self.slider_handle_radius*2, self.slider_handle_radius*2]
            width: self.outline_width


<-ExtendedSliderHorizontal>:
    orientation: 'vertical'
    size_hint_y: None
    height: '90dp'
    label_text: 'something'
    label_format: '%2.3f'
    units: ''
    font_color_tuple: ('Gray', '800')
    min: 0
    max: 20 
    slider: slider.__self__
    FlatLabel:
        id: label
        text: root.label_text
        size_hint_y: None
        height: '25dp'
        color_tuple: root.font_color_tuple
        text_size: self.size
        halign: 'left' 
        style: 'CustomButton1'
        font_size: root.font_size
    CustomSlider:
        id: slider
        theme: root.theme
        size_hint_y: None
        height: '35dp'
        min: root.min
        max: root.max
        step: root.step
        disabled: root.disabled
    BoxLayout:
        orientation: 'horizontal'
        size_hint_y: None
        height: '11dp'
        FlatLabel:
            id: min_label
            # color: app.get_color(root.font_color_tuple)
            text: '%s %s' % (str(root.min), root.units)
            color_tuple: root.font_color_tuple
            text_size: self.size
            halign: 'left'
            valign: 'top'
            style: 'CustomButton1'
            size_hint_y: None
            height: '10dp'
            font_size: '10dp'
        #Widget:
        FlatLabel:
            id: min_label
            # color: app.get_color(root.font_color_tuple)
            text: '%s %s' % (str(root.max), root.units)
            color_tuple: root.font_color_tuple
            text_size: self.size
            halign: 'right'
            valign: 'top'
            style: 'CustomButton1'
            size_hint_y: None
            height: '10dp'
            font_size: '10dp'
            on_parent: root._on_done_building()


<-ExtendedSliderVertical>:
    orientation: 'vertical'
    size_hint_y: None
    height: '100dp'
    label_text: 'something'
    label_format: '%2.3f'
    units: 'dB'
    font_color_tuple: ('Gray', '800')
    min: 0
    max: 20 
    slider: slider.__self__

    FlatLabel:
        id: label
        text: root.label_text
        size_hint_y: None
        height: '35dp'
        color_tuple: root.font_color_tuple
        text_size: self.size
        halign: 'center' 
        style: 'CustomButton1'
        font_size: '13dp'

    FlatLabel:
        id: max_label
        color: app.get_color(root.font_color_tuple)
        text: '%.1f %s' % (root.max, root.units)
        text_size: self.size
        color_tuple: root.font_color_tuple
        halign: 'center'
        valign: 'top'
        style: 'CustomButton1'
        size_hint_y: None
        height: '11dp'
        font_size: '10dp'

    CustomSlider:
        id: slider
        orientation: 'vertical'
        size_hint_y: None
        height: root.height - dp(70)
        min: root.min
        max: root.max
        theme: root.theme
        disabled: root.disabled

    FlatLabel:
        id: min_label
        color: app.get_color(root.font_color_tuple)
        text_size: self.size
        text: '%.1f %s' % (float(root.min), root.units)
        color_tuple: root.font_color_tuple
        halign: 'center'
        valign: 'bottom'
        style: 'CustomButton1'
        size_hint_y: None
        height: '11dp'
        font_size: '10dp'


        on_parent: root._on_done_building()



<-CustomSwitch>:

    lbl1: _lbl1.__self__
    lbl2: _lbl2.__self__
    lbl3: _lbl3.__self__
    style: None 
    background_color: (.9,.9,.9, 1.0)
    switch_color: (.5, .5, .5, 1.0)
    radius: dp(5)
    font_size: dp(20)
    canvas.before:
        Color:
            rgba: self.background_color
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: [(self.radius, self.radius), (self.radius, self.radius), (self.radius, self.radius), (self.radius, self.radius)]
        Color:
            rgba: (.4,.4,.4, 1.0)
        Line:
            rounded_rectangle: [self.x, self.y, self.width, self.height, self.radius]
            width: dp(0.5)
        
    FlatLabel:
        id: _lbl1
        text: ''
        size_hint_x: None
        width: root.width/2.5*1.5
        style: root.style
        font_size: root.font_size
        canvas.before:
            Color:
                rgba: (.5, .5, .7, 0.0)
            Rectangle:
                size: self.size
                pos: self.pos

        on_parent: root.remove_widget(self)
        
    FlatLabel:
        id: _lbl2
        text: ''
        style: root.style
        scaling: 1.75
        radius: dp(15)
        canvas.before:
            Color:
                rgba: root.switch_color
            RoundedRectangle:
                size: (self.size[1]*self.scaling, self.size[1]*self.scaling)
                pos: (self.pos[0]+self.size[0]*(1-self.scaling)/2, self.pos[1]+self.size[1]*(1-self.scaling)/2)
                radius: [(self.radius, self.radius), (self.radius, self.radius), (self.radius, self.radius), (self.radius, self.radius)]
        
    FlatLabel:
        id: _lbl3
        text: ''
        size_hint_x: None
        width: root.width/2.5*1.5
        style: root.style
        font_size: root.font_size
        color: (.2, .2, .2, 1.0)
        canvas.before:
            Color:
                rgba: (.7, .5, .5, 0.0)
            Rectangle:
                size: self.size
                pos: self.pos
        

<-CustomCheckBox>:
    ripple_color: app.get_color(self.ripple_color_tuple)
    radius: '1dp'
    size_scaling: 1 
    canvas.before:
        Color:
            rgba: app.get_color(self.outline_color_tuple)
        Line
            rounded_rectangle: [self.x + self.width*(1-self.size_scaling)/2, self.y + self.height*(1-self.size_scaling)/2, self.width*self.size_scaling, self.height*self.size_scaling, self.radius]
            width: self.outline_size


<-CustomSwitchListItem>:
    orientation: 'horizontal'
    active: switch.active
    padding: [dp(3), dp(0), dp(15), dp(0)]
    spacing: '5dp'
    text: 'something'
    font_color_tuple: ('Blue', '900')
    halign: 'left' 
    valign: 'middle' 
    #style: None 
    switch: switch.__self__
    scaling: 0.3
    label: label.__self__
    #font_size: dp(15)
    #switch_font_size: dp(20)
    #canvas.before:
    #    Color:
    #        rgba: (.7, .7, .5, 0.2)
    #    Rectangle:
    #        size: self.size
    #        pos: self.pos

    FlatLabel:
        id: label
        text: root.text
        size_hint: (.8, 1.0)
        color: app.get_color(root.font_color_tuple)
        style: root.style
        halign: root.halign
        #font_ramp_tuple: root.font_ramp_tuple
        font_size: root.font_size
        valign: root.valign
        text_size: self.size
        disabled_color: (.5, .5, .5, .5)

    BoxLayout:
        orientation: 'vertical'
        size_hint_x: None
        width: switch.width

        Widget:

        CustomSwitch:
            id: switch 
            size_hint: (None, None)
            size: (root.height*2.5*root.scaling, root.height*root.scaling)
            style: root.style
            font_size: root.switch_font_size

        Widget:

<-CustomCheckBoxListItem>:
    orientation: 'horizontal'
    active: checkbox.active
    ripple_color: app.get_color(self.ripple_color_tuple)
    spacing: '5dp'
    icon: 'fa-check'
    radius: 5
    exclusive: False 
    style: None
    detail_font_size: 0
    checkbox: checkbox.__self__

    RelativeLayout:
        orientation: 'vertical'
        size_hint: (0.8, None)
        height: root.height

        FlatLabel:
            id: label
            text: root.text
            size_hint: (None, None)
            size: self.parent.size
            color: app.get_color(root.font_color_tuple)
            style: root.style
            halign: root.halign
            font_ramp_tuple: root.font_ramp_tuple
            valign: root.valign
            text_size: self.size
            disabled_color: (.5, .5, .5, .5)
            #height: self.texture_size[1]
            #theme: root.theme

#            canvas.before:
#                Color:
#                    rgba: (0.5, 1.0, 1.0, 0.5)
#                Rectangle:
#                    size: self.size
#                    pos: self.pos
            
        FlatLabel:
            id: detail_label
            text: '    ' + root.detail_text
            #theme: root.theme
            #font_ramp_tuple: root.font_ramp_tuple
            size_hint: (None, None)
            height: root.height * 0.3
            width: self.parent.width
            color: app.get_color(root.font_color_tuple)
            style: root.style
            halign: root.halign
            valign: 'top'
            font_size: root.detail_font_size
            text_size: self.size
            disabled_color: (.5, .5, .5, .5)
            #pos: [0, ]
            #pos: [self.parent.pos[0], self.parent.pos[1] + dp(10)]

#            canvas.before:
#                Color:
#                    rgba: (1.0, 0.5, 1.0, 0.5)
#                Rectangle:
#                    size: self.size
#                    pos: self.pos

    CustomCheckBox:
        group: root.group
        id: checkbox
        no_interact: False 
        size_hint: (None, 1.0)
        width: self.height
        alpha: root.alpha
        outline_color_tuple: root.outline_color_tuple
        outline_size: root.outline_size
        check_color_tuple: root.check_color_tuple
        color_tuple: root.checkbox_color_tuple
        check_scale: root.check_scale
        icon: root.icon
        size_scaling: root.size_scaling
        radius: root.radius
        exclusive: root.exclusive
        #on_active: root.on_checkbox_active(self, self.active)
        #root.setter('touch_down_active')
        no_interact: True # root.disabled or root.no_interact

<-CustomRLCheckBoxListItem>:
    orientation: 'horizontal'
    active: checkbox.active
    ripple_color: app.get_color(self.ripple_color_tuple)
    spacing: '5dp'
    icon: 'fa-check'
    radius: 5
    exclusive: False 
    style: None
    detail_font_size: 0
    checkbox: checkbox.__self__

    CustomCheckBox:
        group: root.group
        id: checkbox
        no_interact: False 
        size_hint: (None, 1.0)
        width: self.height
        alpha: root.alpha
        outline_color_tuple: root.outline_color_tuple
        outline_size: root.outline_size
        check_color_tuple: root.check_color_tuple
        color_tuple: root.checkbox_color_tuple
        check_scale: root.check_scale
        icon: root.icon
        size_scaling: root.size_scaling
        radius: root.radius
        exclusive: root.exclusive
        #on_active: root.on_checkbox_active(self, self.active)
        #root.setter('touch_down_active')
        no_interact: True # root.disabled or root.no_interact

    RelativeLayout:
        orientation: 'vertical'
        size_hint: (0.8, None)
        height: root.height

        FlatLabel:
            id: label
            text: root.text
            size_hint: (None, None)
            size: self.parent.size
            color: app.get_color(root.font_color_tuple)
            style: root.style
            halign: root.halign
            font_ramp_tuple: root.font_ramp_tuple
            valign: root.valign
            text_size: self.size
            disabled_color: (.5, .5, .5, .5)
            
        FlatLabel:
            id: detail_label
            text: '    ' + root.detail_text
            #theme: root.theme
            #font_ramp_tuple: root.font_ramp_tuple
            size_hint: (None, None)
            height: root.height * 0.3
            width: self.parent.width
            color: app.get_color(root.font_color_tuple)
            style: root.style
            halign: root.halign
            valign: 'top'
            font_size: root.detail_font_size
            text_size: self.size
            disabled_color: (.5, .5, .5, .5)


<PopupButton@CustomButton>:
    style: 'NavigationLabelMainHeading'
    font_size: dp(12)
    radius: dp(5)

<CustomPopupContent>:
    orientation: 'tb-lr'
    size_hint: (1.0, None)
    cols: 1
    padding: dp(5)
    spacing: dp(10)
    height: self.minimum_height

    message_alignment: 'center'
    cancel_text: 'Cancel'
    ok_text: 'Ok'

    btn_color_tuple: ('Brown', '700')
    btn_font_color_tuple: ('Gray', '0000') 

    spacer_widget: spacer_widget.__self__ 
    content_layout: content_layout.__self__
    btn_layout: btn_layout.__self__

    cancel_button: cancel_button.__self__
    ok_button: ok_button.__self__
    label: label.__self__
    ok_btn_layout: ok_btn_layout.__self__
    cancel_btn_layout: cancel_btn_layout.__self__

    popup_icon: popup_icon.__self__
    spinner: spinner.__self__

    FlatIcon:
        id: popup_icon
        size_hint: (1, None)
        height: dp(25)
        font_size: dp(30)
        icon: root.icon
        color_tuple: ('Red', '500')

    CustomSpinner:
        id: spinner
        size_hint: (1, None)
        height: dp(50)
        color: root.spinner_color
        stroke_width: dp(8.25)*1.0
        stroke_length: 10
        speed: 4.0 

    ScrollView:
        size_hint_y: None
        content_layout: content_layout.__self__
        height: min(dp(200), content_layout.minimum_height)

        GridLayout:
            id: content_layout
            cols: 1
            size_hint_y: None
            height: self.minimum_height

            FlatLabel:
                id: label
                size_hint: (1.0, None)
                text_size: self.width, None
                height: self.texture_size[1]
                #height: dp(50)
                # font_ramp_tuple: ('error_content' + str(randint(1,10000)), '1')
                style: 'NavigationLabelMainHeading'
                valign: 'top'
                halign: root.message_alignment
                text: root.message
                color_tuple: root.label_color_tuple
                font_size: dp(12)

    Widget:
        id: spacer_widget
        size_hint_y: None
        height: dp(5)

    BoxLayout:
        id: btn_layout
        orientation: 'horizontal'
        size_hint_y: None
        height: dp(35)
        spacing: dp(5)

        AnchorLayout:
            id: ok_btn_layout
            
            PopupButton:
                id: ok_button
                text: root.ok_text
                color_tuple: root.btn_color_tuple
                font_color_tuple: root.btn_font_color_tuple

        AnchorLayout:
            id: cancel_btn_layout

            PopupButton:
                id: cancel_button
                text: root.cancel_text
                color_tuple: root.btn_color_tuple
                font_color_tuple: root.btn_font_color_tuple

<-CustomSpinner>:
	_size: min(self.height, self.width)
	_rsize: self._size / 2.
	_stroke: max(0.1, self._rsize / 20. if self.stroke_width is None else self.stroke_width)
	_radius: self._rsize - self._stroke * 2.
    canvas:
        Color:
            rgba: self.color
        Line:
            circle:
                (self.center_x, self.center_y, self._radius,
                self._angle_center + self._angle_start,
                self._angle_center + self._angle_end)
            width: self._stroke
            cap: 'none'
        Line:
            circle:
                (self.center_x, self.center_y, self._radius*2, 0, 360)
            width: self._radius * 0.125
            cap: 'none'


<CustomErrorContent>:
    orientation: 'tb-lr'
    size_hint: (1.0, None)
    cancel_button: cancel_button
    cols: 1
    padding: dp(5)
    spacing: dp(5) 
    radius: '2dp'
    height: self.minimum_height
    cancel_text: 'Cancel'
    #cancel_btn_color_tuple: ('Brown', '700')
    #cancel_btn_font_color_tuple: ('Gray', '0000') 
    btn_color_tuple: ('Brown', '700')
    btn_font_color_tuple: ('Gray', '0000') 
    cancel_button: cancel_button.__self__
    label: label.__self__
    message_alignment: 'center'
    icon: icon.__self__

    FlatIcon:
        id: icon
        size_hint: (1, None)
        height: dp(15)
        font_size: dp(25)
        icon: 'fa-exclamation'
        color_tuple: ('Red', '500')

    ScrollView:
        size_hint_y: None
        label_layout: label_layout.__self__
        height: min(dp(200), label_layout.minimum_height)

        GridLayout:
            id: label_layout
            cols: 1
            size_hint_y: None
            height: self.minimum_height

            FlatLabel:
                id: label
                size_hint: (1.0, None)
                text_size: self.width, None
                height: self.texture_size[1]
                #height: dp(50)
                # font_ramp_tuple: ('error_content' + str(randint(1,10000)), '1')
                style: 'NavigationLabelMainHeading'
                valign: 'top'
                halign: root.message_alignment
                text: root.message
                color_tuple: root.label_color_tuple


#    FlatLabel:
#        id: label
#        size_hint: (1.0, None)
#        #height: dp(30)
#        # size: self.texture_size
#
#        size_hint: (1.0, None)
#        text_size: self.width, None
#        height: max(self.texture_size[1], dp(20))
#
#        # text_size: self.size
#        # font_ramp_tuple: ('error_content' + str(randint(1,10000)), '1')
#        style: 'NavigationLabelMainHeading'
#        valign: 'top'
#        halign: 'center'
#        text: root.error_text
#        color_tuple: root.label_color_tuple
#        font_size: dp(12)

    BoxLayout:
        size_hint_y: None
        height: dp(32)

        Widget: 

        CustomButton:
            id: cancel_button
            # theme: root.theme
            text: root.cancel_text
            size_hint: (0.6, None)
            height: dp(30)
            style: 'NavigationLabelMainHeading'
            #color_tuple: root.cancel_btn_color_tuple
            color_tuple: root.btn_color_tuple
            radius: root.radius
            font_size: dp(12)
            font_color_tuple: ('Gray', '0000') 
            radius: dp(3)

        Widget: 

<CustomBusyContent>:
    orientation: 'tb-lr'
    size_hint: (1.0, None)
    cols: 1
    padding: dp(5)
    spacing: dp(5) 
    radius: '2dp'
    height: self.minimum_height
    spinner_color: 0.2, 0.4, .2, 1.0
    cancel_text: 'Cancel'
    #cancel_btn_color_tuple: ('Brown', '700')
    #cancel_btn_font_color_tuple: ('Gray', '0000') 
    btn_color_tuple: ('Brown', '700')
    btn_font_color_tuple: ('Gray', '0000') 
    spinner: _spinner.__self__
    cancel_button: cancel_button.__self__
    label: label.__self__

    #ProgressSpinner:
    CustomSpinner:
        id: _spinner
        size_hint: (1, None)
        height: dp(50)
        color: root.spinner_color
        stroke_width: dp(8.25)*1.0
        stroke_length: 10
        speed: 4.0 

    FlatLabel:
        id: label
        size_hint: (1.0, None)
        #height: dp(30)
        # size: self.texture_size

        size_hint: (1.0, None)
        text_size: self.width, None
        height: max(self.texture_size[1], dp(50))

        # text_size: self.size
        # font_ramp_tuple: ('error_content' + str(randint(1,10000)), '1')
        style: 'NavigationLabelMainHeading'
        valign: 'top'
        halign: 'center'
        text: root.message
        color_tuple: root.label_color_tuple
        font_size: dp(12)

    CustomButton:
        id: cancel_button
        # theme: root.theme
        text: root.cancel_text
        size_hint: (0.6, None)
        height: dp(30)
        style: 'NavigationLabelMainHeading'
        color_tuple: root.btn_color_tuple
        radius: root.radius
        font_size: dp(12)
        font_color_tuple: root.btn_font_color_tuple
        radius: dp(3)






<-CustomPopup>:
    _container: container.__self__
    #_title_icon: None
    #_title_icon_color: None
    label: label.__self__

    canvas.before:
        Color:
            rgba: root.background_color[:3] + [root.background_color[-1] * self._anim_alpha]
        Rectangle:
            size: self._window.size if self._window else (0, 0)
        Color:
            rgba: root.popup_color
        Rectangle:
            size: self.size
            pos: self.pos

    GridLayout:
        padding: dp(3) 
        cols: 1
        #size_hint: None, None
        pos: root.pos
        #size: root.size
        #size_hint_y: None
        #height: self.minimum_height

        FlatLabel:
            id: label
            text: root.title
            color: app.get_color(root.title_color_tuple)
            size_hint_y: None
            height: self.texture_size[1] + dp(5)
            text_size: self.width, None
            font_size: root.title_size
            style: 'NavigationLabelMainHeading'
            halign: root.title_alignment

        Widget:
            size_hint_y: None
            height: dp(1) 
            canvas:
                Color:
                    rgba: root.separator_color
                Rectangle:
                    pos: self.x, self.y + root.separator_height / 2.
                    size: self.width, root.separator_height

        BoxLayout:
            id: container


