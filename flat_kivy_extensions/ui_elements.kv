
<-CustomButtonBase>:
    color: app.get_color(self.color_tuple)
    ripple_color: app.get_color(self.ripple_color_tuple)
    canvas.before:
        Color:
            rgba: self.color_down[0:3] + [self.alpha] if self.state == 'down' or root.disabled else self.color[0:3] + [self.alpha]
        RoundedRectangle:
            size: (self.width - self.border_size[1] - self.border_size[3], self.height - self.border_size[0] - self.border_size[2])
            pos: (self.x + self.border_size[3], self.y + self.border_size[2])
            radius: [(self.radius, self.radius), (self.radius, self.radius), (self.radius, self.radius), (self.radius, self.radius)]

    FlatLabel:
        size_hint: (1.0, 1.0)
        color_tuple: root.font_color_tuple
        text: root.text
        style: root.style
        text_size: root.size
        font_ramp_tuple: root.font_ramp_tuple
        valign: 'middle'
        halign: 'center'
        font_size: root.font_size


<-CustomIconButton>:
    color: app.get_color(self.color_tuple) 
    ripple_color: app.get_color(self.ripple_color_tuple)
    icon_font_size: dp(5) 
    orientation: 'tb-lr'
    canvas.before:
        Color:
            rgb: root.color_down if root.state == 'down' or root.disabled else root.color
        Rectangle:
            size: self.size
            pos: self.pos
    StackLayout:
        orientation: root.orientation
        id: label_space
        padding: root.content_padding
        spacing: root.content_spacing
        FlatIcon:
            id: icon
            size_hint: (None, 1.0)
            width: self.texture_size[0]
            icon: root.icon
            valign: 'middle'
            halign: 'right'
            opacity: label.color[3]
            color_tuple: root.icon_color_tuple
            text_size: self.size
            font_size: root.icon_font_size
        FlatLabel:
            width: root.size[0] - icon.size[0] - root.content_padding[0] - root.content_padding[2]
            size_hint: (None, 1.0)
            text: root.text
            style: root.style
            id: label
            color_tuple: root.font_color_tuple
            font_ramp_tuple: root.font_ramp_tuple
            valign: 'middle'
            halign: 'left'
            text_size: self.size
            font_size: root.font_size


<-CustomSlider>:
    ripple_color: app.get_color(self.ripple_color_tuple)
    canvas:
        Color:
            rgba: app.get_color(self.color_tuple)
        # draw the slider background
        Rectangle:
            pos: (self.x + self.padding, self.center_y - self.slider_bar_width/2) if self.orientation == 'horizontal' else (self.center_x - self.slider_bar_width/2, self.y + self.padding)
            size: (self.width - self.padding * 2, self.slider_bar_width) if self.orientation == 'horizontal' else (self.slider_bar_width, self.height - self.padding * 2)
        Color:
            rgba: app.get_color(self.outline_color_tuple)
        # draw the line around the slider background
        Line:
            rounded_rectangle: [self.x + self.padding, self.center_y - self.slider_bar_width/2, self.width - self.padding * 2, self.slider_bar_width, dp(1)] if self.orientation == 'horizontal' else [self.center_x - self.slider_bar_width/2, self.y + self.padding, self.slider_bar_width, self.height - self.padding * 2, dp(1)]
            width: sp(0.5)
        Color:
            rgba: app.get_color(self.slider_color_tuple)
        # draw the main slider handle
        Ellipse:
            pos: (self.value_pos[0] - self.slider_handle_radius, self.center_y - self.slider_handle_radius) if self.orientation == 'horizontal' else (self.center_x - self.slider_handle_radius, self.value_pos[1] - self.slider_handle_radius)
            size: (self.slider_handle_radius*2, self.slider_handle_radius*2)
        Color:
            rgba: app.get_color(self.slider_outline_color_tuple)
        # draw the line around the slider handle
        Line:
            ellipse: [self.value_pos[0] - self.slider_handle_radius, self.center_y - self.slider_handle_radius, self.slider_handle_radius*2, self.slider_handle_radius*2] if self.orientation == 'horizontal' else [self.center_x - self.slider_handle_radius, self.value_pos[1] - self.slider_handle_radius, self.slider_handle_radius*2, self.slider_handle_radius*2]
            width: sp(1.0)


<-ExtendedSliderHorizontal>:
    orientation: 'vertical'
    size_hint_y: None
    height: '100dp'
    label_text: 'something'
    label_format: '%2.3f'
    units: 'dB'
    font_color_tuple: ('Gray', '800')
    min: 0
    max: 20 
    FlatLabel:
        id: label
        text: root.label_text
        size_hint_y: None
        height: '35dp'
        color_tuple: root.font_color_tuple
        text_size: self.size
        halign: 'left' 
        style: 'CustomButton1'
    CustomSlider:
        id: slider
        size_hint_y: None
        height: '40dp'
        min: root.min
        max: root.max
    BoxLayout:
        orientation: 'horizontal'
        size_hint_y: None
        height: '20dp'
        FlatLabel:
            id: min_label
            color: app.get_color(root.font_color_tuple)
            text: '%s %s' % (str(root.min), root.units)
            text_size: self.size
            color_tuple: root.font_color_tuple
            halign: 'left'
            valign: 'top'
            style: 'CustomButton1'
            size_hint_y: None
            height: '15dp'
            font_size: '15dp'
        Widget:
        FlatLabel:
            id: min_label
            color: app.get_color(root.font_color_tuple)
            text_size: self.size
            text: '%s %s' % (str(root.max), root.units)
            color_tuple: root.font_color_tuple
            halign: 'right'
            valign: 'top'
            style: 'CustomButton1'
            size_hint_y: None
            height: '15dp'
            font_size: '15dp'
            on_parent: root._on_done_building()


<-ExtendedSliderVertical>:
    orientation: 'vertical'
    size_hint_y: None
    height: '200dp'
    label_text: 'something'
    label_format: '%2.3f'
    units: 'dB'
    font_color_tuple: ('Gray', '800')
    min: 0
    max: 20 

    FlatLabel:
        id: max_label
        color: app.get_color(root.font_color_tuple)
        text: '%s %s' % (str(root.max), root.units)
        text_size: self.size
        color_tuple: root.font_color_tuple
        halign: 'center'
        valign: 'top'
        style: 'CustomButton1'
        size_hint_y: None
        height: '15dp'
        font_size: '15dp'

    CustomSlider:
        id: slider
        orientation: 'vertical'
        size_hint_y: None
        height: root.height - dp(80)
        min: root.min
        max: root.max

    FlatLabel:
        id: min_label
        color: app.get_color(root.font_color_tuple)
        text_size: self.size
        text: '%s %s' % (str(root.min), root.units)
        color_tuple: root.font_color_tuple
        halign: 'center'
        valign: 'bottom'
        style: 'CustomButton1'
        size_hint_y: None
        height: '15dp'
        font_size: '15dp'

    FlatLabel:
        id: label
        text: root.label_text
        size_hint_y: None
        height: '50dp'
        color_tuple: root.font_color_tuple
        text_size: self.size
        halign: 'center' 
        style: 'CustomButton1'

        on_parent: root._on_done_building()



<-CustomCheckBox>:
    ripple_color: app.get_color(self.ripple_color_tuple)
    radius: '1dp'
    size_scaling: 1 
    canvas.before:
        Color:
            rgba: app.get_color(self.outline_color_tuple)
        Line
            rounded_rectangle: [self.x + self.width*(1-self.size_scaling)/2, self.y + self.height*(1-self.size_scaling)/2, self.width*self.size_scaling, self.height*self.size_scaling, self.radius]
            width: self.outline_size


<-CustomCheckBoxListItem>:
    orientation: 'horizontal'
    active: checkbox.active
    ripple_color: app.get_color(self.ripple_color_tuple)
    spacing: '5dp'
    icon: 'fa-check'
    radius: 5
    exclusive: False 
    FlatLabel:
        id: label
        text: root.text
        size_hint: (.8, 1.0)
        color: app.get_color(root.font_color_tuple)
        style: root.style
        halign: root.halign
        font_ramp_tuple: root.font_ramp_tuple
        valign: root.valign
        text_size: self.size
    CustomCheckBox:
        group: root.group
        id: checkbox
        no_interact: True
        size_hint: (None, 1.0)
        width: self.height
        alpha: root.alpha
        outline_color_tuple: root.outline_color_tuple
        outline_size: root.outline_size
        check_color_tuple: root.check_color_tuple
        color_tuple: root.checkbox_color_tuple
        check_scale: root.check_scale
        icon: root.icon
        size_scaling: root.size_scaling
        radius: root.radius
        exclusive: root.exclusive
        on_active: root.on_checkbox_active(self, self.active)
        #root.setter('touch_down_active')



