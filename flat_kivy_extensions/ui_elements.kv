
<-CustomButtonBase>:
    color: app.get_color(self.color_tuple)
    ripple_color: app.get_color(self.ripple_color_tuple)
    canvas.before:
        Color:
            rgba: self.color_down[0:3] + [self.alpha] if self.state == 'down' or root.disabled else self.color[0:3] + [self.alpha]
        RoundedRectangle:
            size: (self.width - self.border_size[1] - self.border_size[3], self.height - self.border_size[0] - self.border_size[2])
            pos: (self.x + self.border_size[3], self.y + self.border_size[2])
            radius: [(self.radius, self.radius), (self.radius, self.radius), (self.radius, self.radius), (self.radius, self.radius)]

    FlatLabel:
        size_hint: (1.0, 1.0)
        color_tuple: root.font_color_tuple
        text: root.text
        style: root.style
        text_size: root.size
        font_ramp_tuple: root.font_ramp_tuple
        valign: 'middle'
        halign: 'center'
        font_size: root.font_size


<-CustomIconButton>:
    color: app.get_color(self.color_tuple) 
    ripple_color: app.get_color(self.ripple_color_tuple)
    icon_font_size: dp(5) 
    canvas.before:
        Color:
            rgb: root.color_down if root.state == 'down' or root.disabled else root.color
        Rectangle:
            size: self.size
            pos: self.pos
    StackLayout:
        orientation: 'tb-lr'
        id: label_space
        padding: root.content_padding
        spacing: root.content_spacing
        FlatIcon:
            id: icon
            size_hint: (None, 1.0)
            width: self.texture_size[0]
            icon: root.icon
            valign: 'middle'
            halign: 'right'
            opacity: label.color[3]
            color_tuple: root.icon_color_tuple
            text_size: self.size
            font_size: root.icon_font_size
        FlatLabel:
            width: root.size[0] - icon.size[0]
            size_hint: (None, 1.0)
            text: root.text
            style: root.style
            id: label
            color_tuple: root.font_color_tuple
            font_ramp_tuple: root.font_ramp_tuple
            valign: 'middle'
            halign: 'left'
            text_size: self.size
            font_size: root.font_size


<-CustomSlider>:
    ripple_color: app.get_color(self.ripple_color_tuple)
    canvas:
        Color:
            rgba: app.get_color(self.color_tuple)
        # draw the slider background
        Rectangle:
            pos: (self.x + self.padding, self.center_y - sp(self.v1)) if self.orientation == 'horizontal' else (self.center_x - sp(self.v1), self.y + self.padding)
            size: (self.width - self.padding * 2, sp(self.v2)) if self.orientation == 'horizontal' else (sp(self.v2), self.height - self.padding * 2)
        Color:
            rgba: app.get_color(self.outline_color_tuple)
        # draw the line around the slider background
        Line:
            rounded_rectangle: [self.x + self.padding, self.center_y - sp(self.v1), self.width - self.padding * 2, sp(self.v2), sp(4)] if self.orientation == 'horizontal' else [self.center_x - sp(self.v1), self.y + self.padding, sp(self.v2), self.height - self.padding * 2, sp(4)]
            width: sp(2)
        Color:
            rgba: app.get_color(self.slider_color_tuple)
        # draw the main slider handle
        Ellipse:
            pos: (self.value_pos[0] - sp(self.v2_), self.center_y - sp(self.v3)) if self.orientation == 'horizontal' else (self.center_x - sp(self.v2_), self.value_pos[1] - sp(self.v2))
            size: (sp(self.v4), sp(self.v4))
        Color:
            rgba: app.get_color(self.slider_outline_color_tuple)
        # draw the line around the slider handle
        Line:
            ellipse: [self.value_pos[0] - sp(self.v2_), self.center_y - sp(self.v3), sp(self.v4), sp(self.v4)] if self.orientation == 'horizontal' else [self.center_x - sp(self.v3), self.value_pos[1] - sp(self.v2_), sp(self.v4), sp(self.v4)]
            width: sp(2)




